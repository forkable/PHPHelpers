<?php
/**
 * @link http://github.com/plus3network/PHPHelpers PHPHelpers Git Repository
 * @author Christopher Cowan
 * @copyright Copyright (c) 2010, Christopher Cowan, Plus 3 Network Inc. All rights reserved.
 * @license http://www.opensource.org/licenses/lgpl-2.1.php GNU Lesser General Public License
 */
 
/**
 * This will make a web request and then return the response and headers as an associated array.
 *
 * @return array
 * @author Christopher Cowan
 **/
function make_request($url, $method='GET', $options=array())
{
    # instanciate the curl request
    $curl = curl_init($url);
    
    # set the default options
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_HEADER, 1);
    curl_setopt($curl, CURLINFO_HEADER_OUT, 1);
    
    # set the cookie file
    curl_setopt($curl, CURLOPT_COOKIEFILE, option('cookie_file'));
    curl_setopt($curl, CURLOPT_COOKIEJAR, option('cookie_file'));
    
    # set the request method
    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $method);
    
    # set cookies
    $cookies = get_cookies_from_file(option('cookie_file'));
    if(isset($options['cookies']) && is_array($options['cookies'])) {
        $cookies = array_merge($cookies, $options['cookies']);
    }
    set_cookies_in_file($cookies, option('cookie_file'));
    
    # set custom headers
    if(isset($options['headers']) && is_array($options['headers'])) {
        $headers = array();
        foreach($options['headers'] as $key=>$val) {
            $headers[] = "{$key}: {$val}";
        }
        curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
    }
    
    # post arguments
    if(isset($options['post_fields']) && is_array($options['post_fields'])) {
        curl_setopt($curl, CURLOPT_POSTFIELDS, $options['post_fields']);
    }
    
    # post body
    if(isset($options['post_body'])) {
        curl_setopt($curl, CURLOPT_POSTFIELDS, $options['post_body']);
    }
    
    # get the response
    $response = curl_exec($curl);
    
    # seperate the header form the body, also handle 2 response codes
    $buffer = preg_split('/\r\n\r\n/', $response);
    
    
    if(count($buffer) == 3) {
        $results = array('body'=>$buffer[2]);
        $headers = $buffer[1];
        preg_match('/\r\n\r\nHTTP\/\d\.\d\s+(\d+)/', $response, $matches);
    } else {
        $results = array('body'=>$buffer[1]);
        $headers = $buffer[0];
        preg_match('/HTTP\/\d\.\d\s+(\d+)/', $response, $matches);
    }
    
    $results['request'] = curl_getinfo($curl);
    $results['status_code'] = $results['request']['http_code'];
    curl_close($curl);
    
    # split up headers
    preg_match_all('/([^\r\n:]+):\s+([^\r\n]+)/', $headers, $matches);
    foreach($matches[1] as $key=>$val) {
        if(isset($results['headers'][$val])) {
            if(!is_array($results['headers'][$val])) {
                $results['headers'][$val] = array($results['headers'][$val]);
            } 
            $results['headers'][$val][] = $matches[2][$key];
        } else {
            $results['headers'][$val] = $matches[2][$key];
        }
    }
    
    # parse cookies
    $results['cookies'] = get_cookies_from_file(option('cookie_file'));
    /* if(isset($results['headers']['Set-Cookie'])) {
        $results['cookies'] = array();
        if(is_array($results['headers']['Set-Cookie'])) {
           $set_cookies = $results['headers']['Set-Cookie']; 
        } else {
            $set_cookies = array($results['headers']['Set-Cookie']);
        }
        
        foreach($set_cookies as $cookie) {
            preg_match('/^([^=]+)=([^;]+)/', $cookie, $matches);
            $results['cookies'][$matches[1]] = $matches[2];
            
        }
    }*/
    return $results;
} // END function web_request()

/**
 * This will convert a has to params
 *
 * @return string
 * @author Christopher Cowan
 **/
function to_params($array, $sep='&')
{
    $return = '';
    $_sep = '';
    foreach($array as $key=>$val) {
        $return .= $_sep . $key . '=' . urlencode($val); 
        $_sep = $sep;
    }
    return $return;
} // END function to_params()

/**
 * This will set cookies in an Netscape Cookie file
 *
 * @return void
 * @author Christopher Cowan
 **/
function set_cookies_in_file($cookies,$file)
{
    $fh = fopen($file, 'w+');
    fwrite($fh, "# Netscape HTTP Cookie File\n# http://curl.haxx.se/rfc/cookie_spec.html\n# This file was generated by libcurl! Edit at your own risk.\n\n");
    foreach($cookies as $cookie) {
        if(isset($cookie['domain']) && isset($cookie['key']) && isset($cookie['value'])) {
            $line = array(
                'domain'      => $cookie['domain'],
                'domain_only' => (isset($cookie['domain_only']) && $cookie['domain_only'])? 'TRUE' : 'FALSE',
                'path'        => (isset($cookie['path']))? $cookie['path'] : '/',
                'secure'      => (isset($cookie['secure']) && $cookie['secure'])? 'TRUE' : 'FALSE',
                'expires'     => (isset($cookie['expires']))? $cookie['expires'] : 0,
                'key'         => $cookie['key'],
                'value'       => $cookie['value'],
            );
            fwrite($fh, "{$line['domain']}\t{$line['domain_only']}\t{$line['path']}\t{$line['secure']}\t{$line['expires']}\t{$line['key']}\t{$line['value']}\n");
        }
    }
    fclose($fh);
} // END function set_cookies_in_file()

/**
 * This will parse the cookies file
 *
 * @return void
 * @author Christopher Cowan
 **/
function get_cookies_from_file($file)
{
    $cookies = array();
    $fh = fopen($file, 'r');
    while(!feof($fh)) {
        $buffer = fgets($fh, 8192);
        if(preg_match('/^([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\n]+)$/', $buffer, $matches)) {
            $cookies[] = array(
                'domain'      => $matches[1],
                'domain_only' => ($matches[2] == 'TRUE')? true : false,
                'path'        => $matches[3],
                'secure'      => ($matches[4] == 'TRUE')? true : false,
                'expires'     => $matches[5],
                'key'         => $matches[6],
                'value'       => $matches[7],
            );
        }
    }
    fclose($fh);
    return $cookies;
} // END function get_cookies_from_file()